import smtplib
import base64
import time
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email import encoders
import string
import random
import socket
import struct
from colorama import Fore,init
import datetime
import binascii
from datetime import date
from datetime import datetime
import os
from smtplib import SMTP
import requests
from bs4 import BeautifulSoup
init()

your_email = 'maheshsid@aol.com' # Enter Your Email :)

def Random_IP():
	IP = socket.inet_ntoa(struct.pack('>I', random.randint(1, 0xffffffff)))
	return IP


RANDOM_IP_GEN = Random_IP()


# // ====================================================================================
def Random_OS():
	OSs = ['Windows', 'Linux', 'IOS', 'Android', 'MacOS']
	OS = random.choice(OSs)
	return OS


OS_GEN = Random_OS()


# // ====================================================================================
def Current_Date():
	today = date.today()
	DATE = today.strftime("%B %d, %Y")
	return DATE


CURR_DATE = Current_Date()


# // ====================================================================================
def Random_Country():
	Countries = ['France', 'Spain', 'United States', 'China', 'Argentina', 'Peru', 'Canada', 'Brazil', 'United Kingdom',
				 'Germany', 'Thailand', 'Mexico', 'Turkey', 'Italy', 'Isreal']
	Country = random.choice(Countries)
	return Country


COUNTRY_GEN = Random_Country()


# // ====================================================================================
def Random_Email():
	Names = ['support', 'admin', 'lead', 'manager', 'administrator']
	TLDs = ['@supporting.com', '@helping.com', '@assisting.com', '@teaming.com']
	RAND_EMAIL = random.choice(Names) + random.choice(TLDs)
	return RAND_EMAIL


EMAIL_GEN = Random_Email()


# // ====================================================================================
def Random_Browser():
	Countries = ['Chrome', 'Firefox', 'Edge', 'Safari', 'Opera', 'QQ', 'Yandex', 'UC Browser', 'Maxthon', 'Chromium','AOSP']
	Browser = random.choice(Countries)
	return Browser

BROWSER_GEN = Random_Browser()

# // ====================================================================================
def Random_Name():
	Names_List = ["Aaron", "Abbey", "Abbie", "Abby", "Abdul", "Abe", "Bonny", "Booker", "Boris", "Boyce", "Boyd","Brad", "Bradford", "Caitlin", "Caitlyn", "Calandra", "Caleb", "Calista", "Callie", "Calvin","Donette", "Dong", "Dong", "Donita", "Donn", "Donna", "Donnell", "Earl", "Earle", "Earlean","Earleen", "Earlene", "Earlie", "Earline", "Frederick", "Fredericka", "Fredia", "Fredric", "Fredrick","Fredricka", "Gabriel", "Gabriela", "Gabriele", "Gabriella", "Gabrielle", "Gail", "Gail", "Gala","Gale", "Gale", "Galen", "Galina", "Garfield", "Garland", "Garnet", "Hortencia", "Hortense","Hortensia", "Hosea", "Houston", "Howard", "Hoyt", "Hsiu", "Hubert", "Hue", "Huey", "Hugh", "Hugo","Hui", "Hulda", "Humberto", "Hung", "Hunter", "Hyon", "Hyun", "Ian", "Ida", "Idalia", "Idell","Idella", "Iesha", "Ignacia", "Ignacio", "Jacalyn", "Jacelyn", "Jacinda", "Jacinta", "Jacinto","Jack", "Jack", "Jackeline", "Ka", "Kacey", "Kaci", "Kacie", "Kacy", "Kai", "Kaila", "Kaitlin","Kaitlyn", "Kala", "Kaleigh", "Kaley", "Kali", "Lacey", "Lachelle", "Laci", "Lacie", "Lacresha","Lacy", "Lacy", "Ladawn", "Ladonna", "Ma", "Mabel", "Mabelle", "Mable", "Mac", "Machelle", "Macie","Mack", "Na", "Nada", "Nadene", "Nadia", "Nadine", "Naida", "Nakesha", "Nakia", "Nakisha", "Nakita","Nam", "Nenita", "Neoma", "Neomi", "Nereida", "Nerissa", "Nery", "Nestor", "Neta", "Nettie", "Neva","Nevada", "Neville", "Newton", "Nga", "Ngan", "Ngoc", "Nguyet", "Nia", "Nichelle", "Nichol","Nicholas", "Nichole", "Nicholle", "Nick", "Nicki", "Nickie", "Nickolas", "Nickole", "Nicky", "Nicky","Nicol", "Nicola", "Nicolas", "Nicolasa", "Nicole", "Nicolette", "Nicolle", "Nida", "Nidia", "Niesha","Nieves", "Nigel", "Niki", "Nikia", "Nikita", "Nikki", "Nikole", "Nila", "Nilda", "Nilsa", "Nina","Ninfa", "Nisha", "Nita", "Noah", "Noble", "Nobuko", "Noe", "Noel", "Noel", "Noelia", "Noella","Noelle", "Noemi", "Nohemi", "Nola", "Nolan", "Noma", "Nona", "Nora", "Norah", "Norbert", "Norberto","Noreen", "Norene", "Noriko", "Norine", "Norma", "Norman", "Norman", "Normand", "Norris", "Nova","Novella", "Nu", "Nubia", "Numbers", "Numbers", "Nydia", "Nyla", "Obdulia", "Ocie", "Octavia","Octavio", "Oda", "Odelia", "Odell", "Odell", "Odessa", "Odette", "Odilia", "Odis", "Ofelia", "Ok","Ola", "Olen", "Olene", "Oleta", "Olevia", "Olga", "Olimpia", "Olin", "Olinda", "Oliva", "Olive","Oliver", "Olivia", "Ollie", "Ollie", "Olympia", "Oma", "Omar", "Omega", "Omer", "Ona", "Oneida","Onie", "Onita", "Opal", "Ophelia", "Ora", "Oralee", "Oralia", "Oren", "Oretha", "Orlando", "Orpha","Orval", "Orville", "Oscar", "Oscar", "Ossie", "Osvaldo", "Oswaldo", "Otelia", "Otha", "Otha","Otilia", "Otis", "Otto", "Ouida", "Owen", "Ozell", "Ozella", "Ozie", "Prince", "Princess","Priscila", "Priscilla", "Providencia", "Prudence", "Pura", "Quincy", "Quinn", "Quinn", "Quintin","Quinton", "Quyen", "Ruthanne", "Ruthe", "Ruthie", "Ryan", "Ryan", "Ryann", "Syble", "Sydney","Sydney", "Sylvester", "Sylvia", "Sylvie", "Synthia", "Syreeta", "Tyra", "Tyree", "Tyrell", "Tyron","Tyrone", "Tyson", "Ula", "Ulrike", "Ulysses", "Un", "Una", "Ursula", "Usha", "Ute", "Vada", "Val","Val", "Vivien", "Vivienne", "Von", "Voncile", "Vonda", "Vonnie", "Wonda", "Woodrow", "Wyatt","Wynell", "Wynona", "Yun", "Yung", "Yuonne", "Yuri", "Yuriko", "Yvette", "Yvone", "Yvonne", "Zora","Zoraida", "Zula", "Zulema", "Zulma"]
	FIRST_NAME = random.choice(Names_List)
	return FIRST_NAME


FIRST_NAME_GEN = Random_Name()


# // ====================================================================================
def Random_NameX():
	Names_List = ["Aaron", "Abbey", "Abbie", "Abby", "Abdul", "Abe", "Bonny", "Booker", "Boris", "Boyce", "Boyd","Brad", "Bradford", "Caitlin", "Caitlyn", "Calandra", "Caleb", "Calista", "Callie", "Calvin","Donette", "Dong", "Dong", "Donita", "Donn", "Donna", "Donnell", "Earl", "Earle", "Earlean","Earleen", "Earlene", "Earlie", "Earline", "Frederick", "Fredericka", "Fredia", "Fredric", "Fredrick","Fredricka", "Gabriel", "Gabriela", "Gabriele", "Gabriella", "Gabrielle", "Gail", "Gail", "Gala","Gale", "Gale", "Galen", "Galina", "Garfield", "Garland", "Garnet", "Hortencia", "Hortense","Hortensia", "Hosea", "Houston", "Howard", "Hoyt", "Hsiu", "Hubert", "Hue", "Huey", "Hugh", "Hugo","Hui", "Hulda", "Humberto", "Hung", "Hunter", "Hyon", "Hyun", "Ian", "Ida", "Idalia", "Idell","Idella", "Iesha", "Ignacia", "Ignacio", "Jacalyn", "Jacelyn", "Jacinda", "Jacinta", "Jacinto","Jack", "Jack", "Jackeline", "Ka", "Kacey", "Kaci", "Kacie", "Kacy", "Kai", "Kaila", "Kaitlin","Kaitlyn", "Kala", "Kaleigh", "Kaley", "Kali", "Lacey", "Lachelle", "Laci", "Lacie", "Lacresha","Lacy", "Lacy", "Ladawn", "Ladonna", "Ma", "Mabel", "Mabelle", "Mable", "Mac", "Machelle", "Macie","Mack", "Na", "Nada", "Nadene", "Nadia", "Nadine", "Naida", "Nakesha", "Nakia", "Nakisha", "Nakita","Nam", "Nenita", "Neoma", "Neomi", "Nereida", "Nerissa", "Nery", "Nestor", "Neta", "Nettie", "Neva","Nevada", "Neville", "Newton", "Nga", "Ngan", "Ngoc", "Nguyet", "Nia", "Nichelle", "Nichol","Nicholas", "Nichole", "Nicholle", "Nick", "Nicki", "Nickie", "Nickolas", "Nickole", "Nicky", "Nicky","Nicol", "Nicola", "Nicolas", "Nicolasa", "Nicole", "Nicolette", "Nicolle", "Nida", "Nidia", "Niesha","Nieves", "Nigel", "Niki", "Nikia", "Nikita", "Nikki", "Nikole", "Nila", "Nilda", "Nilsa", "Nina","Ninfa", "Nisha", "Nita", "Noah", "Noble", "Nobuko", "Noe", "Noel", "Noel", "Noelia", "Noella","Noelle", "Noemi", "Nohemi", "Nola", "Nolan", "Noma", "Nona", "Nora", "Norah", "Norbert", "Norberto","Noreen", "Norene", "Noriko", "Norine", "Norma", "Norman", "Norman", "Normand", "Norris", "Nova","Novella", "Nu", "Nubia", "Numbers", "Numbers", "Nydia", "Nyla", "Obdulia", "Ocie", "Octavia","Octavio", "Oda", "Odelia", "Odell", "Odell", "Odessa", "Odette", "Odilia", "Odis", "Ofelia", "Ok","Ola", "Olen", "Olene", "Oleta", "Olevia", "Olga", "Olimpia", "Olin", "Olinda", "Oliva", "Olive","Oliver", "Olivia", "Ollie", "Ollie", "Olympia", "Oma", "Omar", "Omega", "Omer", "Ona", "Oneida","Onie", "Onita", "Opal", "Ophelia", "Ora", "Oralee", "Oralia", "Oren", "Oretha", "Orlando", "Orpha","Orval", "Orville", "Oscar", "Oscar", "Ossie", "Osvaldo", "Oswaldo", "Otelia", "Otha", "Otha","Otilia", "Otis", "Otto", "Ouida", "Owen", "Ozell", "Ozella", "Ozie", "Prince", "Princess","Priscila", "Priscilla", "Providencia", "Prudence", "Pura", "Quincy", "Quinn", "Quinn", "Quintin","Quinton", "Quyen", "Ruthanne", "Ruthe", "Ruthie", "Ryan", "Ryan", "Ryann", "Syble", "Sydney","Sydney", "Sylvester", "Sylvia", "Sylvie", "Synthia", "Syreeta", "Tyra", "Tyree", "Tyrell", "Tyron","Tyrone", "Tyson", "Ula", "Ulrike", "Ulysses", "Un", "Una", "Ursula", "Usha", "Ute", "Vada", "Val","Val", "Vivien", "Vivienne", "Von", "Voncile", "Vonda", "Vonnie", "Wonda", "Woodrow", "Wyatt","Wynell", "Wynona", "Yun", "Yung", "Yuonne", "Yuri", "Yuriko", "Yvette", "Yvone", "Yvonne", "Zora","Zoraida", "Zula", "Zulema", "Zulma"]
	FULL_NAME = random.choice(Names_List) + " " + random.choice(Names_List)
	return FULL_NAME


FULL_NAME_GEN = Random_NameX()


# // ====================================================================================
def Random_MD5():
	RAND_MD5 = binascii.hexlify(os.urandom(16))
	return RAND_MD5


RAND_MD5 = Random_MD5()


# // ====================================================================================
def Random_Ticket_ID():
	UpperLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	OnlyNumbers = '0123456789'
	RAND_TICKET_ID = random.choice(UpperLetters) + random.choice(OnlyNumbers) + random.choice(OnlyNumbers) + "-" + random.choice(UpperLetters) + random.choice(OnlyNumbers) + random.choice(OnlyNumbers) + "-" + random.choice(UpperLetters) + random.choice(OnlyNumbers) + random.choice(OnlyNumbers) + "-" + random.choice(UpperLetters) + random.choice(OnlyNumbers) + random.choice(OnlyNumbers)
	return RAND_TICKET_ID


RAND_TICKET_ID = Random_Ticket_ID()


# // ====================================================================================
def Current_Time():
	now = datetime.now()
	CURR_TIME = now.strftime("%H:%M:%S")
	return CURR_TIME


CURR_TIME = Current_Time()


# // ========================================================================================================================================================================
# // ========================================================================================================================================================================

# 2 - Random Variables
# // ============================
def generator_mix_10(size=10, chars=string.ascii_uppercase + string.digits):
	return ''.join(random.choice(chars) for _ in range(size))


MIX_10_GEN = generator_mix_10()


# // ====================================================================================
def generator_str_10(size=10, chars=string.ascii_lowercase):
	return ''.join(random.choice(chars) for _ in range(size))


STR_10_GEN = generator_str_10()


# // ====================================================================================
def generator_int_10(size=10, chars=string.digits):
	return ''.join(random.choice(chars) for _ in range(size))


INT_10_GEN = generator_int_10()


# // ====================================================================================
def RND5(size=5, chars=string.ascii_lowercase):
	return ''.join(random.choice(chars) for _ in range(size))

def ENCODE(message):
	message_bytes = message.encode('UTF-8')
	base64_bytes = base64.b64encode(message_bytes)
	base64_message = base64_bytes.decode('UTF-8')
	ENCODED = "=?UTF-8?B?" + base64_message + "?="
	return ENCODED



def logo():
	print("""{}
	   
   _____      ____             _______  ____ 
  / ___/___  / / /__  _____   <  / __ \/ __ \
  \__ \/ _ \/ / / _ \/ ___/   / / /_/ / / / /
 ___/ /  __/ / /  __/ /      / /\__, / /_/ / 
/____/\___/_/_/\___/_/      /_//____/\____/  
                                             
           /___/                                                
	    {}{}____________________________________________________________________________
	    Coded By seller 190
	    visit: https://lufix.to/
	    """.format(Fore.LIGHTGREEN_EX, Fore.RED, Fore.RESET))
def TLS_TEST():
	# smtp.host.com, 587, SMTP_USER, SMTP_PASS, from_email@domain.com, Chase Bank, Your Account Is Under Review, TO@to.to, LETTER_MESSAGE, plain/html(Message Type)
	Test_ = open('Savage Sender/SMTPs.txt', 'r').readlines()
	socket.setdefaulttimeout(15)
	for i in Test_:
		try:
			i = i.strip()
			S_Server = i.split('|')[0]
			S_Port = i.split('|')[1]
			S_User = i.split('|')[2]
			S_PWD = i.split('|')[3]
			S_Form = i.split('|')[4]
			server = smtplib.SMTP(S_Server, S_Port)
			server.ehlo()
			server.starttls()
			server.ehlo()
			msg = MIMEMultipart()
			msg['From'] = "Savage Sender <{}>".format(S_Form)
			msg['To'] = 'maheshsid098@outlook.com'
			msg['Subject'] = "Hello World"

			message = '''Here We Go #Savage Sender : {}'''
			msg.attach(MIMEText(message, "plain"))
			server.login(S_User, S_PWD)
			a = server.sendmail(msg['From'], msg['To'], msg.as_string())
			print(Fore.LIGHTGREEN_EX+'NOTE: Message Sent Successfully From {}|{}|{}|{}|{}'.format(S_Server, S_Port, S_User, S_PWD,S_Form)+Fore.RESET)
			Working_SMTPs = open('Savage Sender/Working_SMTPs.txt', 'a')
			Working_SMTPs.write('{}|{}|{}|{}\n'.format(S_Server, S_Port, S_User, S_PWD))

		except:
			print(Fore.RED + 'Message Sending Failed {}|{}|{}|{}|{}'.format(S_Server, S_Port, S_User, S_PWD,S_Form) + Fore.RESET)

def SMTP_Tester():
	Test_ = open('Savage Sender/SMTPs.txt','r').readlines()
	for i in Test_:
		try:
			i = i.strip()
			S_Server = i.split('|')[0]
			S_Port = i.split('|')[1]
			S_User = i.split('|')[2]
			S_PWD = i.split('|')[3]
			# print(S_Server,S_Port,S_User,S_PWD)
			me = "{} <{}>".format('Savage Sender', S_User)
			you = your_email
			msg = MIMEMultipart('alternative')
			msg['Subject'] = ENCODE('{} [{}]'.format(random.choice('Savage Sender Tester ! '), generator_int_10()))
			msg['From'] = me
			msg['To'] = you
			text = "Hello This Is Test"
			part1 = MIMEText(text.encode('utf-8'), 'plain', 'UTF-8')
			msg.attach(part1)
			# Send the message via local SMTP server.
			mail = smtplib.SMTP('{}'.format(S_Server), 587)
			mail.ehlo()
			mail.login('{}'.format(S_User), '{}'.format(S_PWD))
			mail.sendmail(me, you, msg.as_string())
			mail.quit()
			print(Fore.LIGHTGREEN_EX+'NOTE: Message Sent Successfully From {}|{}|{}|{}'.format(S_Server, S_Port, S_User, S_PWD)+Fore.RESET)
			Working_SMTPs = open('Savage Sender/Working_SMTPs.txt', 'a')
			Working_SMTPs.write('{}|{}|{}|{}\n'.format(S_Server, S_Port, S_User, S_PWD))
		except:
			print(Fore.RED+'Message Sending Failed {}|{}|{}|{}'.format(S_Server, S_Port, S_User, S_PWD)+Fore.RESET)
			BAD_SMTPs = open('Savage Sender/BAD_SMTPs.txt', 'a')
			BAD_SMTPs.write('{}|{}|{}|{}\n'.format(S_Server, S_Port, S_User, S_PWD))

def Retry_Failed():
	Falied_Em = open('Savage Sender/Falied_Emails.txt','r').readlines()
	Sucess = 0
	Failed = len(Falied_Em)
	name_ran = open('Savage Sender/Names.txt', 'r').read().split('\n')
	sub_rand = open('Savage Sender/Subjcts.txt', 'r').read().split('\n')
	os.system("title " + "Savage Sender - Sending [{}] - Success: {} , Failed: {} ".format(len(Falied_Em), Sucess, Failed))
	R_SMTP = open('Savage Sender/SMTPs.txt', 'r').read().split('\n')
	# Cut_URL_ = open('Savage Sender/CUT_URL.txt', 'r').read().split('\n')
	for line in Falied_Em:
		######################## Random SMTP Chooice ##############################################
		R_Choose = random.choice(R_SMTP)
		SMTP_Settings_ = R_Choose.split('|')
		##########################################################################################
		line = line.strip('')
		email = line.split(':')[0]
		try:
			me = "{} {} <aspalert{}@alert{}.support.com>".format(ENCODE(random.choice(name_ran)), generator_int_10(10),generator_str_10(15), generator_str_10())
			you = email
			# Create message container - the correct MIME type is multipart/alternative.
			msg = MIMEMultipart('alternative')
			msg['Subject'] = ENCODE('{} [{}]'.format(random.choice(sub_rand), generator_int_10()))
			msg['From'] = me
			msg['To'] = you

			# Create the body of the message (a plain-text and an HTML version).
			text = ""
			html = """\		  {}		  """.format(
				open("Savage Sender/Letter.txt", "r", encoding="UTF-8").read().replace('##email##', email))
			# Record the MIME types of both parts - text/plain and text/html.
			part1 = MIMEText(text.encode('utf-8'), 'plain', 'UTF-8')
			part2 = MIMEText(html.encode('utf-8'), 'html', 'UTF-8')

			# Attach parts into message container.
			# According to RFC 2046, the last part of a multipart message, in this case
			# the HTML message, is best and preferred.
			msg.attach(part1)
			msg.attach(part2)
			# Send the message via local SMTP server.
			mail = smtplib.SMTP('{}'.format(SMTP_Settings_[0]), 587)
			mail.ehlo()
			mail.login('{}'.format(SMTP_Settings_[2]), '{}'.format(SMTP_Settings_[3]))
			mail.sendmail(me, you, msg.as_string())
			mail.quit()
			Sucess += 1
			Failed -=1
			os.system("title " + "Savage Sender - Sending [{}] - Success: {} , Failed: {} ".format(len(Falied_Em), Sucess,Failed))
			print('{}╔════ Savage Sender ═════════════════════════════════════════════╗{}'.format(Fore.LIGHTGREEN_EX,Fore.LIGHTWHITE_EX))
			print('{}║{}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX))
			print("{}║ [+] E-Mail(s) Loaded:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, (len(Falied_Em))))
			print("{}║ [+] E-Mail(s) Sent:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, Sucess))
			print("{}║ [+] E-Mail(s) Failed:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, Failed))
			print("{}║ [+] SMTP_SERVER:{} {}:{}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, SMTP_Settings_[0],int(SMTP_Settings_[1])))
			print("{}║ [+] SMTP_EMAIL:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, SMTP_Settings_[2]))
			print("{}║ [+] SMTP_Password:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, SMTP_Settings_[3]))
			print("{}║ [+] Email Target:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, email))
			print("{}║ [+] Sending Sate:{} {}".format(Fore.LIGHTGREEN_EX, Fore.RESET, 'Sent'))
			print('{}║{}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX))
			print('{}╚════════════════════════════════════════════════════════════════╝{}'.format(Fore.LIGHTGREEN_EX,Fore.LIGHTWHITE_EX))
		except:
			Failed += 1
			os.system("title " + "Savage Sender - Sending [{}] - Success: {} , Failed: {} ".format(len(Falied_Em), Sucess,Failed))
			print('{}╔════ Savage Sender ═════════════════════════════════════════════╗{}'.format(Fore.LIGHTGREEN_EX,Fore.LIGHTGREEN_EX))
			print('{}║{}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
			print("{}║ [+] E-Mail(s) Loaded:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, (len(Falied_Em))))
			print("{}║ [+] E-Mail(s) Sent:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, Sucess))
			print("{}║ [+] E-Mail(s) Failed:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, Failed))
			print("{}║ [+] SMTP_SERVER:{} {}:{}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, SMTP_Settings_[0],int(SMTP_Settings_[1])))
			print("{}║ [+] SMTP_EMAIL:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, SMTP_Settings_[2]))
			print("{}║ [+] SMTP_Password:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, SMTP_Settings_[3]))
			print("{}║ [+] Email Target:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, email))
			print("{}║ [+] Sending Sate:{} {}".format(Fore.LIGHTGREEN_EX, Fore.RESET,'Failed - Please Cheange The Vip Socks (You Have 12 Secones To Chanage The Socks)'))
			print('{}║{}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
			print('{}╚════════════════════════════════════════════════════════════════╝{}'.format(Fore.LIGHTGREEN_EX,Fore.LIGHTGREEN_EX))
			Falied_Emails = open('Savage Sender/Falied_Emails.txt', 'a')
			Falied_Emails.write('{}\n'.format(email))
			time.sleep(12)


def SEND_Function():
	Sucess = 0
	Failed = 0
	leads = open('Savage Sender/Leads.txt',"r", errors="ignore").readlines()
	name_ran = open('Savage Sender/Names.txt', 'r').read().split('\n')
	sub_rand = open('Savage Sender/Subjcts.txt', 'r').read().split('\n')
	os.system("title " + "Savage Sender - Sending [{}] - Success: {} , Failed: {} ".format(len(leads),Sucess,Failed))
	R_SMTP = open('Savage Sender/SMTPs.txt', 'r').read().split('\n')
	# Cut_URL_ = open('Savage Sender/CUT_URL.txt', 'r').read().split('\n')
	for line in leads:
		######################## Random SMTP Chooice ##############################################
		R_Choose = random.choice(R_SMTP)
		SMTP_Settings_ = R_Choose.split('|')
		##########################################################################################
		line = line.strip('')
		email = line.split(':')[0]
		try:
			me = "{} {} <aspalert{}@alert{}.support.com>".format(ENCODE(random.choice(name_ran)), generator_int_10(10),generator_str_10(15),generator_str_10())
			you = email
			# Create message container - the correct MIME type is multipart/alternative.
			msg = MIMEMultipart('alternative')
			msg['Subject'] = ENCODE('{} [{}]'.format(random.choice(sub_rand),generator_int_10()))
			msg['From'] = me
			msg['To'] = you

			# Create the body of the message (a plain-text and an HTML version).
			text = ""
			html = """\	  {}	  """.format(open("Savage Sender/Letter.txt", "r", encoding="UTF-8").read().replace('##email##',email))
			# Record the MIME types of both parts - text/plain and text/html.
			part1 = MIMEText(text.encode('utf-8'), 'plain', 'UTF-8')
			part2 = MIMEText(html.encode('utf-8'), 'html', 'UTF-8')

			# Attach parts into message container.
			# According to RFC 2046, the last part of a multipart message, in this case
			# the HTML message, is best and preferred.
			msg.attach(part1)
			msg.attach(part2)
			# Send the message via local SMTP server.
			mail = smtplib.SMTP('{}'.format(SMTP_Settings_[0]), 587)
			mail.ehlo()
			mail.login('{}'.format(SMTP_Settings_[2]), '{}'.format(SMTP_Settings_[3]))
			mail.sendmail(me, you, msg.as_string())
			mail.quit()
			Sucess+=1
			os.system("title " + "Savage Sender - Sending [{}] - Success: {} , Failed: {} ".format(len(leads), Sucess, Failed))
			print('{}╔════ Savage Sender ═════════════════════════════════════════════╗{}'.format(Fore.LIGHTGREEN_EX,Fore.LIGHTWHITE_EX))
			print('{}║{}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX))
			print("{}║ [+] E-Mail(s) Loaded:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, (len(leads))))
			print("{}║ [+] E-Mail(s) Sent:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, Sucess))
			print("{}║ [+] E-Mail(s) Failed:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, Failed))
			print("{}║ [+] SMTP_SERVER:{} {}:{}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, SMTP_Settings_[0], int(SMTP_Settings_[1])))
			print("{}║ [+] SMTP_EMAIL:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, SMTP_Settings_[2]))
			print("{}║ [+] SMTP_Password:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, SMTP_Settings_[3]))
			print("{}║ [+] Email Target:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX, email))
			print("{}║ [+] Sending Sate:{} {}".format(Fore.LIGHTGREEN_EX, Fore.RESET, 'Sent'))
			print('{}║{}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTWHITE_EX))
			print('{}╚════════════════════════════════════════════════════════════════╝{}'.format(Fore.LIGHTGREEN_EX,Fore.LIGHTWHITE_EX))
		except:
			Failed+=1
			os.system("title " + "Savage Sender - Sending [{}] - Success: {} , Failed: {} ".format(len(leads), Sucess, Failed))
			print('{}╔════ Savage Sender ═════════════════════════════════════════════╗{}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
			print('{}║{}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
			print("{}║ [+] E-Mail(s) Loaded:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, (len(leads))))
			print("{}║ [+] E-Mail(s) Sent:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, Sucess))
			print("{}║ [+] E-Mail(s) Failed:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, Failed))
			print("{}║ [+] SMTP_SERVER:{} {}:{}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, SMTP_Settings_[0], int(SMTP_Settings_[1])))
			print("{}║ [+] SMTP_EMAIL:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, SMTP_Settings_[2]))
			print("{}║ [+] SMTP_Password:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, SMTP_Settings_[3]))
			print("{}║ [+] Email Target:{} {}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX, email))
			print("{}║ [+] Sending Sate:{} {}".format(Fore.LIGHTGREEN_EX, Fore.RESET, 'Failed - Please Cheange The Vip Socks (You Have 12 Secones To Chanage The Socks)'))
			print('{}║{}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
			print('{}╚════════════════════════════════════════════════════════════════╝{}'.format(Fore.LIGHTGREEN_EX,Fore.LIGHTGREEN_EX))
			Falied_Emails = open('Savage Sender/Falied_Emails.txt','a')
			Falied_Emails.write('{}\n'.format(email))
			time.sleep(12)
	if Failed != 0:
		ret = input('{}Do You Wanna Retry The Failed : ?{}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
		if ret == 'yes' or 'y':
			Retry_Failed()
		else:
			pass

def main():
	init()
	logo()
	print("{}DO U Wanna Send Or Test BULK SMTP ?{}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
	print("{}BULK SMTP Testing / TLS NONE ==> Press [1]{}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
	print("{}BULK SMTP Testing / TLS ON ==> Press [2]{}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
	print("{}Bulk Sending ==> Press [3]\n{}".format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
	mk_ch = input('{}Enter Your Choice : {}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
	if mk_ch == '1':
		SMTP_Tester()
		print('{}Testing Done{}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
		print('{}════════════════════════════════════════════════════════════════{}'.format(Fore.LIGHTGREEN_EX,Fore.LIGHTGREEN_EX))
		print('{}Thanks For Using Savage Sender :)){}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
		time.sleep(20)
	elif mk_ch == '2':
		TLS_TEST()
		print('{}Thanks For Using Savage Sender :)){}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
	elif mk_ch == '3':
		SEND_Function()
		print('{}Sending Done{}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
		print('{}════════════════════════════════════════════════════════════════{}'.format(Fore.LIGHTGREEN_EX,Fore.LIGHTGREEN_EX))
		print('{}Thanks For Using Savage Sender :)){}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
		time.sleep(20)
	else:
		print('{}Error Chooice{}'.format(Fore.LIGHTGREEN_EX, Fore.LIGHTGREEN_EX))
if __name__ == '__main__':
	main()
